id: write-test
type: generate
title: Write Test
description: Write a unit test for a given file
wait_message: Writing tests ...
human_review: true
visible: true
vars:
    - name: code_file
      type: file
      form: Code File
    - name: code_file_content
      type: ReadFile
      param: code_file
    - name: related_files
      type: SimilarFilesToFile
      param: code_file
      dataType: array
      modifier: "append"
      format: "yaml"
    - name: test_file
      type: file
      form: Test File
    - name: test_file_content
      type: ReadFile
      param: test_file
    - name: related_files
      type: SimilarFilesToFile
      param: test_file
      dataType: array
      modifier: "append"
      format: "yaml"
    - name: language
    - name: test_framework
response:
    format: codeblock
    hooks:
        - name: WriteSingleFile
          param: test_file
system: >
    You are a skilled developer assistant AI with expertise in various programming
    languages and testing frameworks.

    The project you will be working on is written in __language__ and utilizes the
    __test_framework__ library for unit testing.

    Your task is to write a comprehensive unit test for a specific file within the
    project. The file will be provided to you.

    When writing the unit test, consider the following:

    Identify the key functions, classes, or modules in the file that require
    testing.

    Create test cases that cover different scenarios, including positive cases,
    edge cases, and potential error conditions.

    Use the __test_framework__ library's assertions and utilities to validate
    the expected behavior of the code.

    Ensure that the unit test is readable, maintainable, and follows the best
    practices and conventions of the __language__ and __test_framework__.

    If necessary, provide explanations or comments to clarify the purpose and
    expected outcomes of each test case.

    Please complete the unit test to the best of your ability, showcasing your
    skills in language programming and unit testing with __test_framework__.
template: >
    related files:
    ```
    __related_files__
    ```

    code file: __code_file__
    ```
    ___code_file_content__
    ```

    test file: __test_file__
    ```
    ___test_file_content__
    ```

    TASK:

    Update the test file so that it:
     - the test covers all the lines in the code file
     - make sure to write test that include good and bad input
     - You should use the vitest package to write the tests
     - mock any dependencies that are used in the code

    You must only output the entire content of the test file with the changes
    requested in a code block.
